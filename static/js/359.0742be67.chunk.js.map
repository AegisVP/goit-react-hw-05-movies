{"version":3,"file":"static/js/359.0742be67.chunk.js","mappings":"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","sources":["components/Common/fetchFilms.js","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nconst API_KEY = 'ad24807293275bef83ede161311e71e0';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst PATH_TRENDING = 'movie/popular'; // - список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nconst PATH_SEARCH = 'search/movie'; // - пошук фільму за ключовим словом на сторінці фільмів.\nconst PATH_DETAILS = 'movie'; // - запит повної інформації про фільм для сторінки кінофільму.\nconst PATH_CREDITS = 'credits'; // - запит інформації про акторський склад для сторінки кінофільму.\nconst PATH_REVIEWS = 'reviews'; // - запит оглядів для сторінки кінофільму.\nconst searchParam = new URLSearchParams({ api_key: API_KEY });\n\nexport async function fetchFilmData(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmData = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}?${searchParam}`)\n    .then(r => r.data)\n    .catch(window.alert);\n\n  funcCB(filmData);\n}\n\nexport async function fetchFilmCredits(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmCredits = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}/${PATH_CREDITS}?${searchParam}`)\n    .then(r => r.data.cast.slice(0, 10))\n    .catch(window.alert);\n\n  funcCB(filmCredits);\n}\n\nexport async function fetchFilmReviews(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmReviews = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}/${PATH_REVIEWS}?${searchParam}`)\n    .then(r => r.data.results.slice(0, 10))\n    .catch(window.alert);\n\n  funcCB(filmReviews);\n}\n\nexport const useFilmSearch = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filmList, setFilmList] = useState({ results: [] });\n\n  async function fetchFilmSearch(query = 'trending') {\n    const searchParam = new URLSearchParams({ api_key: API_KEY, adult: true });\n    if (query?.length > 0 && query !== 'trending') searchParam.append('query', query);\n\n    const URL_PATH = query === 'trending' ? PATH_TRENDING : PATH_SEARCH;\n    const path = `${BASE_URL}/${URL_PATH}?${searchParam}`;\n\n    await axios\n      .get(path)\n      .then(r => r.data)\n      .then(setFilmList)\n      .catch(window.alert);\n  }\n\n  // useEffect(() => {\n\n  // },[])\n\n  useEffect(() => {\n    if (searchQuery) fetchFilmSearch(searchQuery);\n    // else setFilmList([]);\n  }, [searchQuery]);\n\n  const newSearch = ({ query = 'trending' } = {}) => {\n    console.log(`saved search: \"${searchQuery}`);\n    console.log(`new search: \"${query}\" (${query?.length})`);\n    \n    if (searchQuery !== query && query?.length >= 0) {\n      // console.log('setting searchQuery to', query);\n      setSearchQuery(String(query).toLocaleLowerCase().trim());\n    }\n  };\n\n  return [filmList, newSearch];\n};\n\n// export default fetchFilmData;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n  margin: ${p => p.theme.mp(0, 0, 2)};\n  padding: ${p => p.theme.mp(2, 3)};\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  color: #222244;\n  background-color: transparent;\n\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.25);\n`;\n\nexport const MovieInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n\nexport const MovieTitle = styled.h1`\n  margin: 0 0 20px;\n  font-size: 36px;\n  font-weight: bold;\n`;\n\nexport const MovieYear = styled.span`\n  font-size: 32px;\n  font-weight: normal;\n`;\n\nexport const MovieMeta = styled.div`\n  display: flex;\n  padding: 10px 0 20px;\n  border-bottom: 1px solid #000000;\n`;\n\nexport const MovieDescription = styled.p`\n  margin: 0 0 0 10px;\n  font-size: 16px;\n  font-weight: normal;\n`;\n\nexport const DescriptionLink = styled(Link)`\n  margin: 10px 0 0;\n  font-size: 16px;\n  font-weight: bold;\n  text-decoration: underline;\n  color: #222244;\n`;\n\nexport const MovieLinks = styled.div`\n  display: flex;\n  padding: 0 0 20px;\n  flex-direction: column;\n  border-bottom: 1px solid #000000;\n`;\n","import { fetchFilmData } from 'components/Common/fetchFilms';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\nimport {\n  Button,\n  DescriptionLink,\n  MovieDescription,\n  MovieInfoContainer,\n  MovieLinks,\n  MovieMeta,\n  MovieTitle,\n  MovieYear,\n} from './MovieInfo.styled';\n\nconst MovieInfo = () => {\n  const params = useParams();\n  const movieId = parseInt(params.movieId);\n  const [filmData, setFilmData] = useState([]);\n\n  const location = useLocation();\n  console.log('location:', location);\n  const backLinkHref = location.state?.from ?? '/movies';\n  console.log('backLinkHref:', backLinkHref);\n\n  useEffect(() => {\n    if (isNaN(movieId) || typeof movieId !== 'number') return <p>Not a number</p>;\n    fetchFilmData(movieId, setFilmData);\n  }, [movieId]);\n\n  console.log('filmData', filmData);\n  const { title, tagline, poster_path, overview, release_date } = filmData;\n\n  return filmData ? (\n    <MovieInfoContainer>\n      <Link to={backLinkHref}>\n        <Button>\n          <IoMdArrowRoundBack />\n          Go back\n        </Button>\n      </Link>\n      <MovieTitle>\n        {title} <MovieYear>({String(release_date).slice(0, 4)})</MovieYear>\n      </MovieTitle>\n      <MovieMeta>\n        {poster_path && (\n          <img\n            width=\"300\"\n            height=\"450\"\n            alt={tagline}\n            src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2${poster_path}`}\n          />\n        )}\n\n        <MovieDescription>{overview}</MovieDescription>\n      </MovieMeta>\n      <MovieLinks>\n        <DescriptionLink to=\"cast\" state={{ from: `${backLinkHref}` }}>\n          Cast\n        </DescriptionLink>\n        <DescriptionLink to=\"reviews\" state={{ from: `${backLinkHref}` }}>\n          Reviews\n        </DescriptionLink>\n      </MovieLinks>\n      <Outlet />\n    </MovieInfoContainer>\n  ) : (\n    <p>Loading...</p>\n  );\n};\n\nexport default MovieInfo;\n"],"names":["API_KEY","BASE_URL","PATH_TRENDING","PATH_SEARCH","PATH_DETAILS","PATH_CREDITS","PATH_REVIEWS","searchParam","URLSearchParams","api_key","fetchFilmData","movieId","funcCB","axios","then","r","data","catch","window","alert","filmData","fetchFilmCredits","cast","slice","filmCredits","fetchFilmReviews","results","filmReviews","useFilmSearch","useState","searchQuery","setSearchQuery","filmList","setFilmList","query","adult","length","append","URL_PATH","path","useEffect","fetchFilmSearch","console","log","String","toLocaleLowerCase","trim","Button","styled","p","theme","mp","MovieInfoContainer","MovieTitle","MovieYear","MovieMeta","MovieDescription","DescriptionLink","Link","MovieLinks","params","useParams","parseInt","setFilmData","location","useLocation","backLinkHref","state","from","isNaN","title","tagline","poster_path","overview","release_date","to","width","height","alt","src"],"sourceRoot":""}