{"version":3,"file":"static/js/387.3fed80c8.chunk.js","mappings":"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","sources":["components/Common/fetchFilms.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nconst API_KEY = 'ad24807293275bef83ede161311e71e0';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst PATH_TRENDING = 'movie/popular'; // - список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nconst PATH_SEARCH = 'search/movie'; // - пошук фільму за ключовим словом на сторінці фільмів.\nconst PATH_DETAILS = 'movie'; // - запит повної інформації про фільм для сторінки кінофільму.\nconst PATH_CREDITS = 'credits'; // - запит інформації про акторський склад для сторінки кінофільму.\nconst PATH_REVIEWS = 'reviews'; // - запит оглядів для сторінки кінофільму.\nconst searchParam = new URLSearchParams({ api_key: API_KEY });\n\nexport async function fetchFilmData(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmData = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}?${searchParam}`)\n    .then(r => r.data)\n    .catch(window.alert);\n\n  funcCB(filmData);\n}\n\nexport async function fetchFilmCredits(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmCredits = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}/${PATH_CREDITS}?${searchParam}`)\n    .then(r => r.data.cast.slice(0, 10))\n    .catch(window.alert);\n\n  funcCB(filmCredits);\n}\n\nexport async function fetchFilmReviews(movieId, funcCB) {\n  if (!movieId) return;\n\n  const filmReviews = await axios\n    .get(`${BASE_URL}/${PATH_DETAILS}/${movieId}/${PATH_REVIEWS}?${searchParam}`)\n    .then(r => r.data.results.slice(0, 10))\n    .catch(window.alert);\n\n  funcCB(filmReviews);\n}\n\nexport const useFilmSearch = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchPage, setSearchPage] = useState('');\n  const [filmList, setFilmList] = useState({ results: [] });\n\n  async function fetchFilmList({ query = 'trending', page = 1 }) {\n    if (query?.length > 0 && query !== 'trending') {\n      searchParam.set('query', query);\n      searchParam.set('page', page);\n    }\n\n    const URL_PATH = query === 'trending' ? PATH_TRENDING : PATH_SEARCH;\n    const path = `${BASE_URL}/${URL_PATH}?${searchParam}`;\n\n    await axios\n      .get(path)\n      .then(r => r.data)\n      .then(setFilmList)\n      .catch(window.alert);\n  }\n\n  useEffect(() => {\n    if (searchQuery) fetchFilmList({ query: searchQuery, page: searchPage });\n    else emptyFilmList();\n  }, [searchQuery, searchPage]);\n\n  const newSearch = ({ query = 'trending', page = 1 } = {}) => {\n    if (searchQuery !== query) {\n      setSearchQuery(query?.trim().toLocaleLowerCase());\n      setSearchPage(page);\n\n      if (!(query?.length >= 0)) emptyFilmList();\n    }\n  };\n\n  const emptyFilmList = () => {\n    setFilmList({});\n  };\n\n  return [filmList, newSearch, emptyFilmList];\n};\n\n// export default fetchFilmData;\n","import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ReviewItem = styled.li`\n  padding: ${p => p.theme.mp(1)};\n  margin: ${p => p.theme.mp(3, 0, 0)};\n\n  font-size: 14px;\n  font-weight: normal;\n\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Author = styled.span`\n  font-weight: bold;\n`;\n\nexport const Comment = styled.span`\n  margin: 0 0 0 10px;\n\n  font-size: 14px;\n  font-weight: normal;\n`;\n","import { fetchFilmReviews } from 'components/Common/fetchFilms';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewList, Author, Comment, ReviewItem } from './Reviews.styled';\n\nconst Reviews = () => {\n  const params = useParams();\n  const movieId = parseInt(params.movieId);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    if (isNaN(movieId) || typeof movieId !== 'number') return <p>Not a number</p>;\n    fetchFilmReviews(movieId, setReviews);\n  }, [movieId]);\n\n  return (\n    <ReviewList>\n      {reviews && reviews.length > 0 ? (\n        reviews.map(({ id, author, content }) => {\n          return (\n            <ReviewItem key={id}>\n              <Author>{author}</Author>: <Comment>{content}</Comment>\n            </ReviewItem>\n          );\n        })\n      ) : (\n        <ReviewItem>No reviews yet...</ReviewItem>\n      )}\n    </ReviewList>\n  );\n};\n\nexport default Reviews;"],"names":["BASE_URL","PATH_TRENDING","PATH_SEARCH","PATH_DETAILS","PATH_CREDITS","PATH_REVIEWS","searchParam","URLSearchParams","api_key","fetchFilmData","movieId","funcCB","axios","then","r","data","catch","window","alert","filmData","fetchFilmCredits","cast","slice","filmCredits","fetchFilmReviews","results","filmReviews","useFilmSearch","useState","searchQuery","setSearchQuery","searchPage","setSearchPage","filmList","setFilmList","query","page","length","set","URL_PATH","path","useEffect","fetchFilmList","emptyFilmList","trim","toLocaleLowerCase","ReviewList","styled","ReviewItem","p","theme","mp","Author","Comment","params","useParams","parseInt","reviews","setReviews","isNaN","map","id","author","content"],"sourceRoot":""}